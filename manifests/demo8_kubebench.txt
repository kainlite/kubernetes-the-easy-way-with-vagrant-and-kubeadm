# # https://github.com/aquasecurity/kube-bench/blob/main/docs/installation.md
# curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.2/kube-bench_0.6.2_linux_amd64.deb -o kube-bench_0.6.2_linux_amd64.deb
# sudo apt install ./kube-bench_0.6.2_linux_amd64.deb -f
#
# # or
# curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.2/kube-bench_0.6.2_linux_amd64.tar.gz -o kube-bench_0.6.2_linux_amd64.tar.gz
# tar -xvf kube-bench_0.6.2_linux_amd64.tar.gz
# ./kube-bench --config-dir `pwd`/cfg --config `pwd`/cfg/config.yaml
#
# kubectl-admin create rolebinding default:psp:unprivileged --role=psp:unprivileged --serviceaccount=psp-example:default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podsecuritypolicydefault
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rrpodsecuritypolicydefault
roleRef:
  kind: ClusterRole
  name: podsecuritypolicydefault
  apiGroup: rbac.authorization.k8s.io
subjects:
# Authorize all service accounts in a namespace:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:serviceaccounts:kube-system
# Or equivalently, all authenticated users in a namespace:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:authenticated
---
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/#run-another-pod
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: allowall
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
